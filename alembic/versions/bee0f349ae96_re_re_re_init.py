"""re_re_re_init

Revision ID: bee0f349ae96
Revises: 
Create Date: 2025-10-24 13:25:07.668684

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

import DB.models

# revision identifiers, used by Alembic.
revision: str = 'bee0f349ae96'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('alleles',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('region', sa.Text(), nullable=False),
    sa.Column('position_nt', sa.BigInteger(), nullable=False),
    sa.Column('ref_nt', sa.Text(), nullable=False),
    sa.Column('alt_nt', sa.Text(), nullable=False),
    sa.CheckConstraint("alt_nt <> ''", name=op.f('ck_alleles_alt_nt_not_empty')),
    sa.CheckConstraint("ref_nt <> ''", name=op.f('ck_alleles_ref_nt_not_empty')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_alleles')),
    sa.UniqueConstraint('region', 'position_nt', 'alt_nt', name='uq_alleles_nt_values', postgresql_nulls_not_distinct=True)
    )
    op.create_table('amino_acids',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('position_aa', sa.BigInteger(), nullable=False),
    sa.Column('ref_aa', sa.Text(), nullable=False),
    sa.Column('alt_aa', sa.Text(), nullable=False),
    sa.Column('gff_feature', sa.Text(), nullable=False),
    sa.Column('ref_codon', sa.Text(), nullable=False),
    sa.Column('alt_codon', sa.Text(), nullable=False),
    sa.CheckConstraint("alt_aa <> ''", name=op.f('ck_amino_acids_alt_aa_not_empty')),
    sa.CheckConstraint("alt_codon <> ''", name=op.f('ck_amino_acids_alt_codon_not_empty')),
    sa.CheckConstraint("gff_feature <> ''", name=op.f('ck_amino_acids_gff_feature_not_empty')),
    sa.CheckConstraint("ref_aa <> ''", name=op.f('ck_amino_acids_ref_aa_not_empty')),
    sa.CheckConstraint("ref_codon <> ''", name=op.f('ck_amino_acids_ref_codon_not_empty')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_amino_acids')),
    sa.UniqueConstraint('position_aa', 'alt_aa', 'gff_feature', 'alt_codon', name='uq_amino_acids_gff_feature_position_alt_aa_alt_codon')
    )
    op.create_table('effects',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('detail', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_effects')),
    sa.UniqueConstraint('detail', name='uq_effects_detail')
    )
    op.create_table('geo_locations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('country_name', sa.Text(), nullable=False),
    sa.Column('admin1_name', sa.Text(), nullable=True),
    sa.Column('admin2_name', sa.Text(), nullable=True),
    sa.Column('admin3_name', sa.Text(), nullable=True),
    sa.Column('geo_center_lon', sa.Double(), nullable=True),
    sa.Column('geo_center_lat', sa.Double(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_geo_locations')),
    sa.UniqueConstraint('country_name', 'admin1_name', 'admin2_name', 'admin3_name', name='uq_geo_locations_division_names', postgresql_nulls_not_distinct=True)
    )
    op.create_table('lineage_systems',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('lineage_system_name', sa.Text(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lineage_systems')),
    sa.UniqueConstraint('lineage_system_name', name='uq_lineage_systems_name')
    )
    op.create_table('papers',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('authors', sa.Text(), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('publication_year', sa.BigInteger(), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_papers')),
    sa.UniqueConstraint('authors', 'publication_year', 'title', name='uq_papers_authors_title_year')
    )
    op.create_table('phenotype_metrics',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('name', sa.Text(), nullable=False),
    sa.Column('assay_type', sa.Text(), nullable=False),
    sa.CheckConstraint("assay_type <> ''", name=op.f('ck_phenotype_metrics_assay_type_not_empty')),
    sa.CheckConstraint("name <> ''", name=op.f('ck_phenotype_metrics_name_not_empty')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_phenotype_metrics')),
    sa.UniqueConstraint('name', name='uq_phenotype_metrics_name')
    )
    op.create_table('annotations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('effect_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['effect_id'], ['effects.id'], name=op.f('fk_annotations_effect_id_effects')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_annotations'))
    )
    op.create_table('lineages',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('lineage_system_id', sa.BigInteger(), nullable=False),
    sa.Column('lineage_name', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['lineage_system_id'], ['lineage_systems.id'], name=op.f('fk_lineages_lineage_system_id_lineage_systems')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lineages')),
    sa.UniqueConstraint('lineage_system_id', 'lineage_name', name='uq_lineages_name_uq_within_system')
    )
    op.create_table('phenotype_metric_values',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('phenotype_metric_id', sa.BigInteger(), nullable=False),
    sa.Column('amino_acid_id', sa.BigInteger(), nullable=False),
    sa.Column('value', sa.Double(), nullable=False),
    sa.ForeignKeyConstraint(['amino_acid_id'], ['amino_acids.id'], name=op.f('fk_phenotype_metric_values_amino_acid_id_amino_acids')),
    sa.ForeignKeyConstraint(['phenotype_metric_id'], ['phenotype_metrics.id'], name=op.f('fk_phenotype_metric_values_phenotype_metric_id_phenotype_metrics')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_phenotype_metric_values')),
    sa.UniqueConstraint('phenotype_metric_id', 'amino_acid_id', name='uq_phenotype_metric_values_metric_and_amino_acid')
    )
    op.create_table('samples',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('accession', sa.Text(), nullable=False),
    sa.Column('bio_project', sa.Text(), nullable=False),
    sa.Column('bio_sample', sa.Text(), nullable=True),
    sa.Column('bio_sample_accession', sa.Text(), nullable=True),
    sa.Column('bio_sample_model', sa.Text(), nullable=False),
    sa.Column('center_name', sa.Text(), nullable=False),
    sa.Column('experiment', sa.Text(), nullable=False),
    sa.Column('host', sa.Text(), nullable=True),
    sa.Column('instrument', sa.Text(), nullable=False),
    sa.Column('platform', sa.Text(), nullable=False),
    sa.Column('isolate', sa.Text(), nullable=True),
    sa.Column('library_name', sa.Text(), nullable=False),
    sa.Column('library_layout', sa.Text(), nullable=False),
    sa.Column('library_selection', sa.Text(), nullable=False),
    sa.Column('library_source', sa.Text(), nullable=False),
    sa.Column('organism', sa.Text(), nullable=False),
    sa.Column('is_retracted', sa.Boolean(), nullable=False),
    sa.Column('retraction_detected_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('isolation_source', sa.Text(), nullable=True),
    sa.Column('collection_start_date', sa.Date(), nullable=True),
    sa.Column('collection_end_date', sa.Date(), nullable=True),
    sa.Column('release_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('creation_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('version', sa.Text(), nullable=False),
    sa.Column('sample_name', sa.Text(), nullable=False),
    sa.Column('sra_study', sa.Text(), nullable=False),
    sa.Column('serotype', sa.Text(), nullable=True),
    sa.Column('geo_location_id', sa.BigInteger(), nullable=True),
    sa.Column('consent_level', sa.Text(), nullable=False),
    sa.Column('assay_type', sa.Text(), nullable=False),
    sa.Column('avg_spot_length', sa.Double(), nullable=True),
    sa.Column('bases', sa.BigInteger(), nullable=False),
    sa.Column('bytes', sa.BigInteger(), nullable=False),
    sa.Column('datastore_filetype', sa.Text(), nullable=False),
    sa.Column('datastore_region', sa.Text(), nullable=False),
    sa.Column('datastore_provider', sa.Text(), nullable=False),
    sa.CheckConstraint('(not is_retracted and retraction_detected_date is null) or (is_retracted and retraction_detected_date is not null)', name=op.f('ck_samples_retraction_values_existence_in_harmony')),
    sa.CheckConstraint('collection_start_date <= collection_end_date', name=op.f('ck_samples_collection_start_not_after_collection_end')),
    sa.CheckConstraint('num_nulls(collection_start_date, collection_end_date) in (0, 2)', name=op.f('ck_samples_collection_start_and_end_both_absent_or_both_present')),
    sa.ForeignKeyConstraint(['geo_location_id'], ['geo_locations.id'], name=op.f('fk_samples_geo_location_id_geo_locations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_samples')),
    sa.UniqueConstraint('accession', name='uq_samples_accession')
    )
    op.create_table('annotations_amino_acids',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('amino_acid_id', sa.BigInteger(), nullable=False),
    sa.Column('annotation_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['amino_acid_id'], ['amino_acids.id'], name=op.f('fk_annotations_amino_acids_amino_acid_id_amino_acids')),
    sa.ForeignKeyConstraint(['annotation_id'], ['annotations.id'], name=op.f('fk_annotations_amino_acids_annotation_id_annotations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_annotations_amino_acids')),
    sa.UniqueConstraint('amino_acid_id', 'annotation_id', name='uq_annotations_amino_acids_pair')
    )
    op.create_table('annotations_papers',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('paper_id', sa.BigInteger(), nullable=False),
    sa.Column('annotation_id', sa.BigInteger(), nullable=False),
    sa.Column('quotation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['annotation_id'], ['annotations.id'], name=op.f('fk_annotations_papers_annotation_id_annotations')),
    sa.ForeignKeyConstraint(['paper_id'], ['papers.id'], name=op.f('fk_annotations_papers_paper_id_papers')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_annotations_papers')),
    sa.UniqueConstraint('paper_id', 'annotation_id', name='uq_annotations_papers_annotation_paper_pair')
    )
    op.create_table('intra_host_variants',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.BigInteger(), nullable=False),
    sa.Column('allele_id', sa.BigInteger(), nullable=False),
    sa.Column('ref_dp', sa.BigInteger(), nullable=False),
    sa.Column('alt_dp', sa.BigInteger(), nullable=False),
    sa.Column('alt_freq', sa.Double(), nullable=False),
    sa.Column('ref_rv', sa.BigInteger(), nullable=False),
    sa.Column('alt_rv', sa.BigInteger(), nullable=False),
    sa.Column('ref_qual', sa.BigInteger(), nullable=False),
    sa.Column('alt_qual', sa.BigInteger(), nullable=False),
    sa.Column('total_dp', sa.BigInteger(), nullable=False),
    sa.Column('pval', sa.Double(), nullable=False),
    sa.Column('pass_qc', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['allele_id'], ['alleles.id'], name=op.f('fk_intra_host_variants_allele_id_alleles')),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], name=op.f('fk_intra_host_variants_sample_id_samples')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_intra_host_variants')),
    sa.UniqueConstraint('sample_id', 'allele_id', name='uq_intra_host_variants_sample_allele_pair')
    )
    op.create_index(op.f('ix_intra_host_variants_allele_id'), 'intra_host_variants', ['allele_id'], unique=False)
    op.create_table('lineages_immediate_children',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('parent_id', sa.BigInteger(), nullable=False),
    sa.Column('child_id', sa.BigInteger(), nullable=False),
    sa.CheckConstraint('parent_id <> child_id', name=op.f('ck_lineages_immediate_children_no_self_parenthood')),
    sa.ForeignKeyConstraint(['child_id'], ['lineages.id'], name=op.f('fk_lineages_immediate_children_child_id_lineages')),
    sa.ForeignKeyConstraint(['parent_id'], ['lineages.id'], name=op.f('fk_lineages_immediate_children_parent_id_lineages')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_lineages_immediate_children')),
    sa.UniqueConstraint('parent_id', 'child_id', name='uq_lineages_immediate_children_parent_child')
    )
    op.create_table('mutations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.BigInteger(), nullable=False),
    sa.Column('allele_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['allele_id'], ['alleles.id'], name=op.f('fk_mutations_allele_id_alleles')),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], name=op.f('fk_mutations_sample_id_samples')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mutations')),
    sa.UniqueConstraint('sample_id', 'allele_id', name='uq_mutations_sample_allele_pair')
    )
    op.create_index(op.f('ix_mutations_allele_id'), 'mutations', ['allele_id'], unique=False)
    op.create_table('samples_lineages',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('sample_id', sa.BigInteger(), nullable=False),
    sa.Column('lineage_id', sa.BigInteger(), nullable=False),
    sa.Column('abundance', sa.Float(), nullable=True),
    sa.Column('is_consensus_call', sa.Boolean(), nullable=False),
    sa.CheckConstraint('(abundance is null) = is_consensus_call', name=op.f('ck_samples_lineages_has_abundance_xor_is_consensus')),
    sa.ForeignKeyConstraint(['lineage_id'], ['lineages.id'], name=op.f('fk_samples_lineages_lineage_id_lineages')),
    sa.ForeignKeyConstraint(['sample_id'], ['samples.id'], name=op.f('fk_samples_lineages_sample_id_samples')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_samples_lineages')),
    sa.UniqueConstraint('sample_id', 'lineage_id', 'is_consensus_call', name='uq_samples_lineages_sample_id_lineage_id_is_consensus_call')
    )
    op.create_index(op.f('ix_samples_lineages_lineage_id'), 'samples_lineages', ['lineage_id'], unique=False)
    op.create_table('intra_host_translations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('intra_host_variant_id', sa.BigInteger(), nullable=False),
    sa.Column('amino_acid_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['amino_acid_id'], ['amino_acids.id'], name=op.f('fk_intra_host_translations_amino_acid_id_amino_acids')),
    sa.ForeignKeyConstraint(['intra_host_variant_id'], ['intra_host_variants.id'], name=op.f('fk_intra_host_translations_intra_host_variant_id_intra_host_variants')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_intra_host_translations')),
    sa.UniqueConstraint('intra_host_variant_id', 'amino_acid_id', name='uq_intra_host_translations_variant_amino_acid_pair')
    )
    op.create_index(op.f('ix_intra_host_translations_amino_acid_id'), 'intra_host_translations', ['amino_acid_id'], unique=False)
    op.create_table('mutation_translations',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('mutation_id', sa.BigInteger(), nullable=False),
    sa.Column('amino_acid_id', sa.BigInteger(), nullable=False),
    sa.ForeignKeyConstraint(['amino_acid_id'], ['amino_acids.id'], name=op.f('fk_mutation_translations_amino_acid_id_amino_acids')),
    sa.ForeignKeyConstraint(['mutation_id'], ['mutations.id'], name=op.f('fk_mutation_translations_mutation_id_mutations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_mutation_translations')),
    sa.UniqueConstraint('mutation_id', 'amino_acid_id', name='uq_mutation_translations_mutation_amino_acid_pair')
    )
    op.create_index(op.f('ix_mutation_translations_amino_acid_id'), 'mutation_translations', ['amino_acid_id'], unique=False)
    # ### end Alembic commands ###

    # manually added: lineage hierarchy
    op.execute(sqltext=DB.models.SqlSnippets.create_view_lineages_deep_children)
    op.execute(sqltext=DB.models.SqlSnippets.create_function_check_cyclic_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.create_trigger_check_cyclic_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.create_function_check_cross_system_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.create_trigger_check_cross_system_lineage)


def downgrade() -> None:
    # manually added: lineage hierarchy
    op.execute(sqltext=DB.models.SqlSnippets.drop_trigger_check_cross_system_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.drop_function_check_cross_system_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.drop_trigger_check_cyclic_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.drop_function_check_cyclic_lineage)
    op.execute(sqltext=DB.models.SqlSnippets.drop_view_lineages_deep_children)

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_mutation_translations_amino_acid_id'), table_name='mutation_translations')
    op.drop_table('mutation_translations')
    op.drop_index(op.f('ix_intra_host_translations_amino_acid_id'), table_name='intra_host_translations')
    op.drop_table('intra_host_translations')
    op.drop_index(op.f('ix_samples_lineages_lineage_id'), table_name='samples_lineages')
    op.drop_table('samples_lineages')
    op.drop_index(op.f('ix_mutations_allele_id'), table_name='mutations')
    op.drop_table('mutations')
    op.drop_table('lineages_immediate_children')
    op.drop_index(op.f('ix_intra_host_variants_allele_id'), table_name='intra_host_variants')
    op.drop_table('intra_host_variants')
    op.drop_table('annotations_papers')
    op.drop_table('annotations_amino_acids')
    op.drop_table('samples')
    op.drop_table('phenotype_metric_values')
    op.drop_table('lineages')
    op.drop_table('annotations')
    op.drop_table('phenotype_metrics')
    op.drop_table('papers')
    op.drop_table('lineage_systems')
    op.drop_table('geo_locations')
    op.drop_table('effects')
    op.drop_table('amino_acids')
    op.drop_table('alleles')
    # ### end Alembic commands ###
